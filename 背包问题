#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

int knapsack(vector<int> &w, vector<int> &v, int W) {
	int n = w.size();
	vector<vector<int>> dp(n + 1, vector<int>(W + 1, 0)); 

	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= W; j++) {
			if (j < w[i - 1]) { 
				dp[i][j] = dp[i - 1][j];
			} else { 
				dp[i][j] = max(dp[i - 1][j], dp[i][j - w[i - 1]] + v[i - 1]); 
			}
		}
	}

	return dp[n][W];
}

int main() {
	int n, W;
	cin >> n >> W;

	vector<int>w;
	vector<int>v;
	int a, b;
	for (int i = 0; i < n; i++) {
		cin >> a >> b;
		v.push_back(a);
		w.push_back(b);
	}

	cout << knapsack(w, v, W) << endl; 

	return 0;
}
